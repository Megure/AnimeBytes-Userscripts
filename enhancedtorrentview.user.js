// Generated by CoffeeScript 1.9.0

/*
// ==UserScript==
// @name        Enhanced Torrent View
// @namespace   Megure@AnimeBytes.tv
// @description Shows how much yen you would receive if you seeded torrents; shows required seeding time; allows sorting and filtering of torrent tables; dynamic loading of transfer history tables
// @include     http*://animebytes.tv*
// @version     0.90
// @grant       GM_getValue
// @grant       GM_setValue
// @icon        http://animebytes.tv/favicon.ico
// ==/UserScript==
 */

(function() {
  var andRe, createTitle, currencyRe, dateTimeRe, downRe, dur2string, durationRe, dynamicLoad, f, fAge, fDur, fInt, fSeeders, fSize, filterTorrentTable, getCell, getCol, getNextSeparatorElementSibling, log10, parseCell, parseRow, parseTable, ratioRe, regExpEscape, reqTime, saveUserCreation, showYen, sizeRe, sortRows, table, timeFrame, timeFrameStr, toggleYen, torrentsFilter, unitPrefix, yen2string, yenPerGB, _i, _j, _len, _len1, _ref, _ref1;

  showYen = GM_getValue('ABTorrentsShowYen', 'true');

  reqTime = GM_getValue('ABTorrentsReqTime', 'true');

  sortRows = GM_getValue('ABHistSortRows', 'true');

  dynamicLoad = GM_getValue('ABHistDynLoad', 'true');

  torrentsFilter = GM_getValue('ABTorrentsFilter', 'true');

  timeFrame = parseInt(GM_getValue('ABTorrentsYenTimeFrame', '24'), 10);

  timeFrameStr = (function() {
    switch (timeFrame) {
      case 1:
        return 'hour';
      case 24:
        return 'day';
      case 168:
        return 'week';
      default:
        return timeFrame + 'hours';
    }
  })();

  sizeRe = /^([\d\.]+)\s([A-Z]?)B$/i;

  downRe = /^([\d\.]+)\s([A-Z]?)B\s\(([\d\.]+)%\)$/i;

  ratioRe = /^(∞|\-\-|[\d\.]+)$/i;

  andRe = /(and|\s)/ig;

  durationRe = /^(?:(\d+)years?)?(?:(\d+)months?)?(?:(\d+)weeks?)?(?:(\d+)days?)?(?:(\d+)hours?)?(?:(\d+)minutes?)?(?:(\d+)seconds?)?(\s*\([^)]*\)\s*)*$/i;

  dateTimeRe = /^(\d+)\-(\d{1,2})\-(\d{1,2})\s+(\d{1,2}):(\d{1,2})$/i;

  currencyRe = /^(?:[¥|€|£|\$]\s*)([\d\.]+)$/i;

  regExpEscape = function(str) {
    return (str + '').replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&');
  };

  unitPrefix = function(prefix) {
    switch (prefix.toUpperCase()) {
      case '':
        return 1 / 1073741824;
      case 'K':
        return 1 / 1048576;
      case 'M':
        return 1 / 1024;
      case 'G':
        return 1;
      case 'T':
        return 1024;
      case 'P':
        return 1048576;
      case 'E':
        return 1073741824;
      default:
        return 0;
    }
  };

  getCol = function(row, cell) {
    var cells, cols, _i, _len, _ref;
    cols = 0;
    _ref = row.cells;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cells = _ref[_i];
      if (cell === cells) {
        return cols;
      }
      cols += cells.colSpan;
    }
    return cols;
  };

  getCell = function(row, index) {
    var cell, cols, _i, _len, _ref;
    cols = 0;
    _ref = row.cells;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cell = _ref[_i];
      if (cols === index) {
        return cell;
      }
      cols += cell.colSpan;
    }
    return null;
  };

  getNextSeparatorElementSibling = function(row) {
    while ((row != null) && row.id.indexOf('group_') !== 0 && row.className.indexOf('edition_info') === -1) {
      row = row.nextElementSibling;
    }
    return row;
  };

  dur2string = function(duration) {
    var res, tempD, tempH, tempM;
    tempD = Math.floor(duration / 24);
    tempH = Math.floor(duration % 24);
    tempM = Math.ceil((duration * 60) % 60);
    if (tempM === 60) {
      tempH += 1;
      tempM = 0;
    }
    if (tempH >= 24) {
      tempD += 1;
      tempH -= 24;
    }
    res = tempD + ' days';
    if (tempH > 0) {
      res += ', ' + tempH + ' hours';
    }
    if (tempM > 0) {
      res += ', ' + tempM + ' minutes';
    }
    return res;
  };

  log10 = Math.round(Math.log(timeFrame) / Math.LN10);

  yen2string = function(yen) {
    return yen.toFixed(Math.max(2 - log10, 0));
  };

  fInt = 24 * 365.25 / timeFrame * (Math.pow(2, timeFrame / (24 * 365.25)) - 1) / Math.log(2);

  fDur = function(dur) {
    return Math.pow(2, dur / (24 * 365.25));
  };

  fSize = function(size) {
    return Math.max(0.1, Math.sqrt(size)) / 4;
  };

  fSeeders = function(seeders) {
    return Math.min(1, 3 / Math.sqrt(seeders + 4));
  };

  fAge = 2 - 1 / (1 + Math.exp(5 - ((new Date()).getTime() - parseInt(GM_getValue('creation', '0'), 10)) / 1728000000));

  if (isNaN(fAge)) {
    fAge = 1;
  }

  f = function(size, seeders, dur) {
    return fSize(size) * fSeeders(seeders) * fDur(dur) * fAge * timeFrame * fInt;
  };

  createTitle = function(size, seeders, dur) {
    var end, i, start, title, _i;
    title = '¥' + (timeFrame * fSize(size)).toPrecision(6) + ' \tbase for size';
    if ((100 * (fInt - 1)).toFixed(1) !== '0.0') {
      title += '\n+' + (100 * (fInt - 1)).toFixed(1) + '% \tfor interest per ' + timeFrameStr;
    }
    if ((100 * (fAge - 1)).toFixed(1) !== '0.0') {
      title += '\n+' + (100 * (fAge - 1)).toFixed(1) + '% \tfor your account\'s age';
    }
    if ((100 * (fDur(dur) - 1)).toFixed(1) !== '0.0') {
      title += '\n+' + (100 * (fDur(dur) - 1)).toFixed(1) + '% \tfor your seeding time';
    }
    if ((100 * (fSeeders(seeders) - 1)).toFixed(1) !== '0.0') {
      title += '\n' + (100 * (fSeeders(seeders) - 1)).toFixed(1) + '% \tfor number of seeders';
    }
    title += '\n\n¥ per ' + timeFrameStr + ' \t¥ per ' + timeFrameStr + ' per GB\t#seeders\n';
    start = Math.max(seeders - 1, 5);
    end = Math.max(seeders + 1, 5);
    for (i = _i = start; start <= end ? _i <= end : _i >= end; i = start <= end ? ++_i : --_i) {
      title += '¥' + f(size, i, dur).toPrecision(6) + ' \t';
      title += '¥' + (f(size, i, dur) / size).toPrecision(6) + ' \t\t';
      if (i === 5) {
        title += '≤';
      }
      title += i;
      if (i !== end) {
        title += '\n';
      }
    }
    return title;
  };

  yenPerGB = 0;

  toggleYen = function(force) {
    if (force == null) {
      force = false;
    }
    return function() {
      var cell, _i, _j, _len, _len1, _ref, _ref1;
      if (force === false) {
        yenPerGB = 1 - yenPerGB;
      }
      _ref = document.querySelectorAll('th.UserScriptToggleYenPerGB,td.UserScriptToggleYenPerGB');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cell = _ref[_i];
        if (yenPerGB === 1) {
          cell.style.display = '';
        } else {
          cell.style.display = 'none';
        }
      }
      _ref1 = document.querySelectorAll('th.UserScriptToggleYen,td.UserScriptToggleYen');
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        cell = _ref1[_j];
        if (yenPerGB === 0) {
          cell.style.display = '';
        } else {
          cell.style.display = 'none';
        }
      }
    };
  };

  parseCell = function(cell) {
    var match, num, textContent, textContentNoComma;
    textContent = cell.textContent.trim();
    textContentNoComma = textContent.replace(/,/g, '').trim();
    match = cell.querySelector('img');
    if (cell.textContent === '' && (match != null)) {
      return match.alt.toUpperCase();
    }
    match = textContentNoComma.match(downRe);
    if (match != null) {
      return parseFloat(match[1]) * unitPrefix(match[2]);
    }
    match = textContentNoComma.match(sizeRe);
    if (match != null) {
      return parseFloat(match[1]) * unitPrefix(match[2]);
    }
    match = textContentNoComma.match(dateTimeRe);
    if (match != null) {
      match.shift();
      match = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = match.length; _i < _len; _i++) {
          num = match[_i];
          _results.push(parseInt(num, 10));
        }
        return _results;
      })();
      return new Date(match[0], match[1] - 1, match[2], match[3], match[4]);
    }
    match = textContentNoComma.replace(andRe, '').match(durationRe);
    if (match != null) {
      match.shift();
      match = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = match.length; _i < _len; _i++) {
          num = match[_i];
          if (num != null) {
            _results.push(parseInt(num, 10));
          } else {
            _results.push(0);
          }
        }
        return _results;
      })();
      return 24 * (match[0] * 365.25 + match[1] * 30.4375 + match[2] * 7 + match[3]) + match[4] + match[5] / 60 + match[6] / 3600;
    }
    match = textContentNoComma.match(currencyRe);
    if (match != null) {
      return parseFloat(match[1]);
    }
    match = textContentNoComma.match(ratioRe);
    if (match != null) {
      switch (match[1]) {
        case '∞':
          return Infinity;
        case '--':
          return -0.2;
        case '0':
          return -0.1;
        default:
          return parseFloat(match[1]);
      }
    } else if (/^Never(\s*\([^)]*\)\s*)*$/i.test(textContentNoComma)) {
      return 0;
    } else {
      return textContent.toUpperCase();
    }
  };

  parseRow = function(row, sizeIndex, seedersIndex, durIndex) {
    var blockQuote, cell, duration, i, rowData, seeders, seedingTime, size, td1, td2, torrentId, _i, _j, _len, _ref, _ref1;
    size = sizeIndex != null ? parseCell(getCell(row, sizeIndex)) : 1;
    seeders = seedersIndex != null ? parseCell(getCell(row, seedersIndex)) : 5;
    duration = durIndex != null ? parseCell(getCell(row, durIndex)) : 0;
    torrentId = row.querySelector('a[title="Download"]');
    if (torrentId != null) {
      torrentId = torrentId.href.match(/id=(\d+)/i);
    }
    if (torrentId != null) {
      torrentId = document.getElementById('torrent_' + torrentId[1]);
    }
    if ((sizeIndex != null) && reqTime.toString() === 'true') {
      seedingTime = Math.max(0, size - 10) * 5 + 72;
      getCell(row, sizeIndex).title = 'You need to seed this torrent for at least\n' + dur2string(seedingTime) + '\nor it will become a hit and run!';
      if (torrentId != null) {
        blockQuote = torrentId.querySelector('blockquote');
      }
      if (blockQuote != null) {
        blockQuote.appendChild(document.createElement('br'));
        blockQuote.innerHTML += 'You need to seed this torrent for at least <span class="r01">' + dur2string(seedingTime) + '</span> or it will become a hit and run!';
      }
    }
    if ((sizeIndex != null) && (seedersIndex != null) && showYen.toString() === 'true') {
      td1 = document.createElement('td');
      td1.textContent = '¥' + yen2string(f(size, seeders, duration));
      td1.title = createTitle(size, seeders, duration);
      td1.className = 'UserScriptToggleYen';
      td2 = document.createElement('td');
      td2.textContent = '¥' + yen2string(f(size, seeders, duration) / size);
      td2.title = createTitle(size, seeders, duration);
      td2.className = 'UserScriptToggleYenPerGB';
      td2.style.display = 'none';
      td1.addEventListener('click', toggleYen());
      td2.addEventListener('click', toggleYen());
      row.appendChild(td2);
      row.appendChild(td1);
    }
    rowData = [torrentId];
    if (sortRows.toString() === 'true') {
      _ref = row.cells;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cell = _ref[_i];
        rowData.push(parseCell(cell));
        if (cell.colSpan > 1) {
          for (i = _j = 2, _ref1 = cell.colSpan; 2 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 2 <= _ref1 ? ++_j : --_j) {
            rowData.push(null);
          }
        }
      }
    }
    return rowData;
  };

  parseTable = function(table) {
    var a, a1, a2, cell, clonedNode, curPage, durIndex, headers, index, lastPage, loadPage, newPagenum, nextPage, nextPagenums, non_torrent, non_torrents, pagenum, pagenums, prevPage, previousPagenums, row, seedersIndex, sizeIndex, sortDesc, sortFunction, sortFunctions, sortIndex, tBody, tableData, td1, td2, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _results;
    sizeIndex = [];
    seedersIndex = [];
    durIndex = [];
    headers = table.querySelector('tr');
    _ref = headers.cells;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cell = _ref[_i];
      if (cell.textContent.trim().toLowerCase() === 'size' || cell.title.toLowerCase() === 'size' || cell.querySelector('*[title="Size"]') !== null) {
        sizeIndex.push(getCol(headers, cell));
      }
      if (cell.title.toLowerCase() === 'seeders' || cell.querySelector('*[title="Seeders"]') !== null) {
        seedersIndex.push(getCol(headers, cell));
      }
      if (cell.textContent.trim().toLowerCase() === 'seeding time') {
        durIndex.push(getCol(headers, cell));
      }
    }
    if (sizeIndex.length === 0) {
      console.log("Warning: Found no size column.");
    }
    if (sizeIndex.length > 1) {
      console.log("Warning: Found more than one size column.");
    }
    if (seedersIndex.length === 0) {
      console.log("Warning: Found no seeders column.");
    }
    if (seedersIndex.length > 1) {
      console.log("Warning: Found more than one seeders column.");
    }
    if (durIndex.length > 1) {
      console.log("Warning: Found more than one seeding time column.");
    }
    sizeIndex = sizeIndex.length === 0 ? null : sizeIndex[0];
    seedersIndex = seedersIndex.length === 0 ? null : seedersIndex[0];
    durIndex = durIndex.length === 0 ? null : durIndex[0];
    if ((sizeIndex != null) && (seedersIndex != null) && showYen.toString() === 'true') {
      td1 = document.createElement(headers.cells[0].nodeName);
      td1.textContent = '¥/' + timeFrameStr.charAt(0);
      td1.title = '¥ per ' + timeFrameStr;
      td1.className = 'UserScriptToggleYen';
      td2 = document.createElement(headers.cells[0].nodeName);
      td2.textContent = '¥/' + timeFrameStr.charAt(0) + '/GB';
      td2.title = '¥ per ' + timeFrameStr + ' per GB';
      td2.className = 'UserScriptToggleYenPerGB';
      td2.style.display = 'none';
      headers.appendChild(td2);
      headers.appendChild(td1);
      non_torrents = document.querySelectorAll('tr.edition_info,tr.pad,tr[id^="group_"]');
      for (_j = 0, _len1 = non_torrents.length; _j < _len1; _j++) {
        non_torrent = non_torrents[_j];
        non_torrent.cells[non_torrent.cells.length - 1].colSpan += 1;
      }
    }
    tableData = (function() {
      var _k, _len2, _ref1, _results;
      _ref1 = table.querySelectorAll('tr.torrent,tr.group_torrent');
      _results = [];
      for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
        row = _ref1[_k];
        _results.push([row].concat(parseRow(row, sizeIndex, seedersIndex, durIndex)));
      }
      return _results;
    })();
    tBody = tableData[0][0].parentNode;
    sortIndex = null;
    sortDesc = true;
    sortFunction = function(index) {
      return function(a, b) {
        if ((a[index + 2] != null) && (b[index + 2] != null)) {
          if (a[index + 2] > b[index + 2]) {
            return -1;
          } else if (a[index + 2] < b[index + 2]) {
            return 1;
          } else {
            return 0;
          }
        } else if ((a[index + 2] != null) && (b[index + 2] == null)) {
          return -1;
        } else if ((b[index + 2] != null) && (a[index + 2] == null)) {
          return 1;
        } else {
          return 0;
        }
      };
    };
    sortFunctions = function(index, force) {
      if (force == null) {
        force = false;
      }
      return function(event) {
        var nextGroupElementSibling, _k, _len2;
        if (event != null) {
          event.stopPropagation();
          event.preventDefault();
        }
        if (index != null) {
          if (sortIndex === index && force === false) {
            sortDesc ^= true;
            tableData.reverse();
          } else {
            if (force === false) {
              sortDesc = true;
            }
            sortIndex = index;
            tableData.sort(sortFunction(index));
            if (sortDesc !== true) {
              tableData.reverse();
            }
          }
        }
        for (_k = 0, _len2 = tableData.length; _k < _len2; _k++) {
          row = tableData[_k];
          nextGroupElementSibling = getNextSeparatorElementSibling(row[0]);
          if (nextGroupElementSibling != null) {
            tBody.insertBefore(row[0], nextGroupElementSibling);
            if (row[1] != null) {
              tBody.insertBefore(row[1], nextGroupElementSibling);
            }
          } else {
            tBody.appendChild(row[0]);
            if (row[1] != null) {
              tBody.appendChild(row[1]);
            }
          }
        }
      };
    };
    if (sortRows.toString() === 'true') {
      _ref1 = headers.cells;
      for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
        cell = _ref1[_k];
        index = getCol(headers, cell);
        a = document.createElement('a');
        a.href = 'javascript:void(0);';
        a.textContent = '*';
        a.addEventListener('click', sortFunctions(index));
        cell.appendChild(a);
      }
    }
    if (dynamicLoad.toString() === 'true') {
      curPage = document.URL.match(/page=(\d+)/i);
      curPage = curPage != null ? parseInt(curPage[1], 10) : 1;
      prevPage = curPage - 1;
      nextPage = curPage + 1;
      if (table.previousElementSibling != null) {
        previousPagenums = table.previousElementSibling.querySelector('div.pagenums');
      }
      if (table.nextElementSibling != null) {
        nextPagenums = table.nextElementSibling.querySelector('div.pagenums');
      }
      pagenums = [previousPagenums, nextPagenums];
      loadPage = function(prev) {
        if (prev == null) {
          prev = false;
        }
        return function(event) {
          var newPage, newURL, xhr;
          if (event != null) {
            event.stopPropagation();
            event.preventDefault();
          }
          if (prev) {
            newPage = prevPage--;
          } else {
            newPage = nextPage++;
          }
          if (newPage < 1 || newPage > lastPage) {
            return;
          }
          newURL = document.URL.split('#')[0];
          if (newURL.indexOf('page=') >= 0) {
            newURL = newURL.replace(/page=(\d+)/i, "page=" + newPage);
          } else {
            newURL += "&page=" + newPage;
          }
          xhr = new XMLHttpRequest();
          xhr.open('GET', newURL, true);
          xhr.send();
          return xhr.onreadystatechange = function() {
            var newDoc, parser, _l, _len3, _ref2;
            if (xhr.readyState === 4) {
              parser = new DOMParser();
              newDoc = parser.parseFromString(xhr.responseText, 'text/html');
              _ref2 = newDoc.querySelectorAll('tr.torrent,tr.group_torrent');
              for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
                row = _ref2[_l];
                tableData.push([row].concat(parseRow(row, sizeIndex, seedersIndex, durIndex)));
              }
              sortFunctions(sortIndex, true)(null);
              return toggleYen(true)(null);
            }
          };
        };
      };
      _results = [];
      for (_l = 0, _len3 = pagenums.length; _l < _len3; _l++) {
        pagenum = pagenums[_l];
        if (!(pagenum != null)) {
          continue;
        }
        if (pagenum.lastChild.href != null) {
          lastPage = pagenum.lastChild.href.match(/page=(\d+)/i);
          lastPage = lastPage != null ? parseInt(lastPage[1], 10) : 1;
        } else {
          lastPage = parseInt(pagenum.lastChild.textContent, 10);
          if (isNaN(lastPage)) {
            lastPage = 1;
          }
        }
        clonedNode = pagenum.parentNode.cloneNode(true);
        newPagenum = clonedNode.querySelector('div.pagenums');
        while (newPagenum.hasChildNodes()) {
          newPagenum.removeChild(newPagenum.lastChild);
        }
        a1 = document.createElement('a');
        a1.href = '#';
        a1.className = 'next-prev';
        a1.textContent = 'Load next page dynamically →';
        a2 = document.createElement('a');
        a2.href = '#';
        a2.className = 'next-prev';
        a2.textContent = '← Load previous page dynamically';
        newPagenum.appendChild(a2);
        newPagenum.appendChild(a1);
        a1.addEventListener('click', loadPage(false), true);
        a2.addEventListener('click', loadPage(true), true);
        _results.push(pagenum.parentNode.parentNode.insertBefore(clonedNode, pagenum.parentNode.nextSibling));
      }
      return _results;
    }
  };

  _ref = document.querySelectorAll('.torrent_table,.torrent_group');
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    table = _ref[_i];
    parseTable(table);
  }

  filterTorrentTable = function(table, deselected, oldBox) {
    var body, box, form, head, headClickEvent, index, j, label, shownValues, tag, tags, text, toBeCollapsed, torrent, torrentId, torrents, val, values, _j, _k, _l, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref1;
    if (deselected == null) {
      deselected = {};
    }
    if (oldBox == null) {
      oldBox = null;
    }
    torrents = table.querySelectorAll('tr.group_torrent,tr.torrent');
    if (torrents.length <= 1) {
      return;
    }
    for (_j = 0, _len1 = torrents.length; _j < _len1; _j++) {
      torrent = torrents[_j];
      torrentId = torrent.querySelector('a[title="Download"]');
      if (torrentId != null) {
        torrentId = torrentId.href.match(/id=(\d+)/i);
      }
      if (torrentId != null) {
        torrentId = document.getElementById('torrent_' + torrentId[1]);
      }
      text = torrent.cells[0].lastElementChild.textContent.replace(/^\s*»/i, '');
      toBeCollapsed = false;
      for (tag in deselected) {
        if ((new RegExp('(^|[|/])\\s*' + regExpEscape(tag) + '\\s*($|[|/])')).test(text) === true) {
          toBeCollapsed = true;
          break;
        }
      }
      if (toBeCollapsed === true) {
        torrent.style.visibility = 'collapse';
        if (torrentId != null) {
          torrentId.style.visibility = 'collapse';
        }
      } else {
        torrent.style.visibility = '';
        if (torrentId != null) {
          torrentId.style.visibility = '';
        }
      }
    }
    tags = {};
    values = [];
    for (_k = 0, _len2 = torrents.length; _k < _len2; _k++) {
      torrent = torrents[_k];
      text = torrent.cells[0].lastElementChild.textContent.replace(/^\s*»/i, '');
      if (text.indexOf('|') >= 0) {
        text = text.split('|');
      } else {
        text = text.split('/');
      }
      for (j = _l = 0, _len3 = text.length; _l < _len3; j = ++_l) {
        val = text[j];
        val = val.trim();
        if (val !== '') {
          if (tags[val] == null) {
            tags[val] = 0;
          }
          if (torrent.style.visibility !== 'collapse') {
            tags[val] = 1;
          }
          if (values[j] == null) {
            values[j] = {};
          }
          if (values[j][val] == null) {
            values[j][val] = 1;
          }
        }
      }
    }
    if (values.length > 0 || Object.keys(deselected).length > 0) {
      box = document.createElement('div');
      head = document.createElement('div');
      body = document.createElement('div');
      form = document.createElement('form');
      shownValues = {};
      for (_m = 0, _len4 = values.length; _m < _len4; _m++) {
        index = values[_m];
        _ref1 = Object.keys(index).sort();
        for (_n = 0, _len5 = _ref1.length; _n < _len5; _n++) {
          tag = _ref1[_n];
          if (shownValues[tag] != null) {
            continue;
          } else {
            shownValues[tag] = 1;
          }
          label = document.createElement('label');
          label.innerHTML = '<input type="checkbox" ' + (deselected[tag] != null ? '' : 'checked="checked"') + '> ' + tag;
          label.querySelector('input').value = tag;
          label.style.marginRight = '1em';
          label.style.display = 'inline-block';
          if (tags[tag] === 0 && (deselected[tag] == null)) {
            label.style.opacity = '0.25';
          }
          form.appendChild(label);
        }
        form.appendChild(document.createElement('hr'));
      }
      form.addEventListener('change', function(e) {
        var cb, cbs, _len6, _o;
        deselected = {};
        cbs = form.querySelectorAll('input[type="checkbox"]');
        for (_o = 0, _len6 = cbs.length; _o < _len6; _o++) {
          cb = cbs[_o];
          if (cb.checked !== true) {
            deselected[cb.value] = 1;
          }
        }
        return filterTorrentTable(table, deselected, box);
      });
      box.className = 'box torrent_filter_box';
      head.className = 'head colhead strong';
      body.className = 'body pad';
      body.style.display = 'none';
      body.appendChild(form);
      head.innerHTML = '<a href="#"><span class="triangle-right-md"><span class="stext">+/-</span></span> Filter </a>';
      headClickEvent = function(e) {
        if (e != null) {
          e.preventDefault();
        }
        if (body.style.display !== 'none') {
          body.style.display = 'none';
          return head.querySelector('span').className = 'triangle-right-md';
        } else {
          body.style.display = '';
          return head.querySelector('span').className = 'triangle-down-md';
        }
      };
      head.addEventListener('click', headClickEvent);
      box.appendChild(head);
      box.appendChild(body);
      if (oldBox != null) {
        table.parentNode.replaceChild(box, oldBox);
        return headClickEvent();
      } else {
        return table.parentNode.insertBefore(box, table);
      }
    }
  };

  if (torrentsFilter.toString() === 'true') {
    _ref1 = document.querySelectorAll('.torrent_table,.torrent_group');
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      table = _ref1[_j];
      filterTorrentTable(table);
    }
  }

  saveUserCreation = function() {
    var elem, joinDate, userid, userstats, _k, _len2, _ref2, _results;
    userid = document.querySelector('div#header div#userinfo li#username_menu a.username');
    if ((userid != null) && userid.href === document.URL) {
      userstats = document.querySelector('div#content div#user_rightcol div.userstatsleft dl.userprofile_list');
      _ref2 = userstats.children;
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        elem = _ref2[_k];
        if (elem.textContent.indexOf("Join") !== -1) {
          try {
            joinDate = elem.nextElementSibling.firstElementChild.title;
            GM_setValue('creation', Date.parse(joinDate));
          } catch (_error) {}
          break;
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  };

  if (GM_getValue('creation', '0').toString() === '0') {
    saveUserCreation();
  }

}).call(this);
